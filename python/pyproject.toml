[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "demo-python"
version = "1.0.0"
description = "Python bindings for C++ Demo Project"
authors = ["Hakula Chen <i@hakula.xyz>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/hakula139/cpp-demo-project"
repository = "https://github.com/hakula139/cpp-demo-project"
documentation = "https://github.com/hakula139/cpp-demo-project"
keywords = ["cpp", "cpp23", "pybind11", "demo"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
    "Programming Language :: C++",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
packages = [{ include = "demo", from = "src" }]

[tool.poetry.dependencies]
python = "^3.13"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.4.2"
pytest-cov = "^6.3.0"
pytest-xdist = "^3.8.0"
pytest-benchmark = "^5.1.0"

# Type checking
mypy = "^1.17.1"

# Code formatting and linting
black = "^25.1.0"
isort = "^6.0.1"
flake8 = "^7.3.0"
bandit = "^1.8.6"

# TODO: Documentation

# Development tools
pre-commit = "^4.3.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.4.2"
pytest-cov = "^6.3.0"
pytest-xdist = "^3.8.0"
pytest-benchmark = "^5.1.0"

[tool.poetry.scripts]
demo-algorithms = "examples.algorithms_example:main"
demo-containers = "examples.containers_example:main"
demo-exceptions = "examples.exceptions_example:main"
demo-random = "examples.random_example:main"
demo-shapes = "examples.shapes_example:main"
demo-timing = "examples.timing_example:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-config",
    "--strict-markers",
    "--verbose",
    "--cov=src/demo",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
markers = [
    "slow: mark a test as slow (deselect with '-m \"not slow\"')",
    "integration: mark a test as integration test",
]
filterwarnings = ["error", "ignore::UserWarning", "ignore::DeprecationWarning"]

[tool.coverage.run]
source = ["src/demo"]
omit = ["*/__pycache__/*", "*/examples/*", "*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "return NotImplemented",
    "if __name__ == '__main__':",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py313']
skip-string-normalization = true
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["examples", "src", "tests"]

[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = false
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["cpp_features.*"]
ignore_missing_imports = true

[tool.bandit]
skips = ["B101"]
