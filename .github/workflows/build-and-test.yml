name: Build & Test

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build and test'
        required: true
        default: 'master'

env:
  LLVM_VERSION: 20
  GCC_VERSION: 14

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-24.04
          - macos-15
        compiler:
          - clang
          - gcc
        preset:
          - debug-python-strict
          - release-python-strict

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || '' }}

      - name: Install dependencies (Ubuntu & LLVM ${{ env.LLVM_VERSION }})
        if: runner.os == 'Linux' && matrix.compiler == 'clang'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh ${{ env.LLVM_VERSION }}

          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            catch2 \
            cmake \
            cppcheck \
            ninja-build \
            clang-tidy-${{ env.LLVM_VERSION }}

          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${{ env.LLVM_VERSION }} ${{ env.LLVM_VERSION }}00
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${{ env.LLVM_VERSION }} ${{ env.LLVM_VERSION }}00
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-${{ env.LLVM_VERSION }} ${{ env.LLVM_VERSION }}00
          echo "CC=clang" >>$GITHUB_ENV
          echo "CXX=clang++" >>$GITHUB_ENV

      - name: Install dependencies (Ubuntu & GCC ${{ env.GCC_VERSION }})
        if: runner.os == 'Linux' && matrix.compiler == 'gcc'
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa -y
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            cppcheck \
            ninja-build \
            gcc-${{ env.GCC_VERSION }}

          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GCC_VERSION }} ${{ env.GCC_VERSION }}00
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ env.GCC_VERSION }} ${{ env.GCC_VERSION }}00
          echo "CC=gcc" >>$GITHUB_ENV
          echo "CXX=g++" >>$GITHUB_ENV

      - name: Install dependencies (macOS & LLVM ${{ env.LLVM_VERSION }})
        if: runner.os == 'macOS' && matrix.compiler == 'clang'
        run: |
          brew install --quiet \
            catch2 \
            cppcheck \
            ninja \
            llvm@${{ env.LLVM_VERSION }}

          LLVM_HOME=$(brew --prefix llvm@${{ env.LLVM_VERSION }})
          echo "$LLVM_HOME/bin" >>$GITHUB_PATH
          echo "CC=$LLVM_HOME/bin/clang" >>$GITHUB_ENV
          echo "CXX=$LLVM_HOME/bin/clang++" >>$GITHUB_ENV
          echo "CPPFLAGS=-I$LLVM_HOME/include" >>$GITHUB_ENV
          echo "LDFLAGS=-L$LLVM_HOME/lib/c++ -L$LLVM_HOME/lib/unwind -lunwind" >>$GITHUB_ENV

      - name: Install dependencies (macOS & GCC ${{ env.GCC_VERSION }})
        if: runner.os == 'macOS' && matrix.compiler == 'gcc'
        run: |
          brew install --quiet \
            cppcheck \
            ninja \
            gcc@${{ env.GCC_VERSION }}

          GCC_HOME=$(brew --prefix gcc@${{ env.GCC_VERSION }})
          echo "$GCC_HOME/bin" >>$GITHUB_PATH
          echo "CC=$GCC_HOME/bin/gcc-${{ env.GCC_VERSION }}" >>$GITHUB_ENV
          echo "CXX=$GCC_HOME/bin/g++-${{ env.GCC_VERSION }}" >>$GITHUB_ENV
          echo "CPPFLAGS=-I$GCC_HOME/include" >>$GITHUB_ENV
          echo "LDFLAGS=-L$GCC_HOME/lib/gcc/${{ env.GCC_VERSION }}" >>$GITHUB_ENV

      - name: Install Python dependencies
        run: |
          cd python
          pip3 install poetry --break-system-packages
          poetry install

      - name: Configure
        run: |
          cmake \
            --preset ${{ matrix.preset }} \
            -DENABLE_CLANG_TIDY=${{ matrix.compiler == 'clang' }}

      - name: Build
        run: |
          cmake \
            --build \
            --preset ${{ matrix.preset }} \
            --parallel

      - name: Run C++ tests
        run: |
          ctest \
            --preset ${{ matrix.preset }} \
            --parallel

      - name: Run Python tests
        env:
          PYTHONPATH: 'python/src:build/binding'
        run: |
          poetry run pytest python/tests -v

      - name: Run C++ examples
        run: |
          for example in build/examples/*_example; do
            echo "Running $example..."
            $example
            echo
          done

      - name: Run Python examples
        run: |
          for example in python/examples/*_example.py; do
            echo "Running $example..."
            python3 $example
            echo
          done

      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.preset }}
          path: |
            build/
          retention-days: 3
