name: Build & Test

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build and test'
        required: true
        default: 'master'

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        compiler:
          - g++
          - clang++
        preset:
          - debug-strict
          - release-strict

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || '' }}

      - name: Install dependencies (Ubuntu & LLVM 20)
        if: runner.os == 'Linux' && matrix.compiler == 'clang++'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh 20

          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            catch2 \
            cmake \
            cppcheck \
            ninja-build \
            clang-tidy-20

          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-20 2000
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-20 2000
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-20 2000

          echo "CXX=clang++" >>$GITHUB_ENV

      - name: Install dependencies (Ubuntu & GCC 14)
        if: runner.os == 'Linux' && matrix.compiler == 'g++'
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            catch2 \
            cmake \
            cppcheck \
            ninja-build \
            gcc-14

          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 1400
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 1400

          echo "CXX=g++" >>$GITHUB_ENV

      - name: Install dependencies (macOS & LLVM 20)
        if: runner.os == 'macOS' && matrix.compiler == 'clang++'
        run: |
          brew install \
            catch2 \
            cmake \
            cppcheck \
            ninja \
            llvm@20

          LLVM_HOME=$(brew --prefix llvm@20)
          echo "$LLVM_HOME/bin" >>$GITHUB_PATH
          echo "CXX=$LLVM_HOME/bin/clang++" >>$GITHUB_ENV
          echo "CPPFLAGS=-I$LLVM_HOME/include" >>$GITHUB_ENV
          echo "LDFLAGS=-L$LLVM_HOME/lib/c++ -L$LLVM_HOME/lib/unwind -lunwind" >>$GITHUB_ENV

      - name: Install dependencies (macOS & GCC 14)
        if: runner.os == 'macOS' && matrix.compiler == 'g++'
        run: |
          brew install \
            catch2 \
            cmake \
            cppcheck \
            ninja \
            gcc@14

          GCC_HOME=$(brew --prefix gcc@14)
          echo "$GCC_HOME/bin" >>$GITHUB_PATH
          echo "CXX=$GCC_HOME/bin/g++-14" >>$GITHUB_ENV
          echo "CPPFLAGS=-I$GCC_HOME/include" >>$GITHUB_ENV
          echo "LDFLAGS=-L$GCC_HOME/lib/gcc/14" >>$GITHUB_ENV

      - name: Configure with preset
        run: |
          cmake --preset ${{ matrix.preset }}

      - name: Build with preset
        run: |
          cmake --build --preset ${{ matrix.preset }} --parallel

      - name: Test with preset
        run: |
          ctest --preset ${{ matrix.preset }} --parallel

      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.preset }}
          path: |
            build/${{ matrix.preset }}/
          retention-days: 3
